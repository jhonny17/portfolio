name: Deploy production
run-name: Deploy production

on:
  push:
    branches:
      - main

permissions:
  contents: write
  deployments: write

concurrency:
  group: deploy-production-group-lock

jobs:
  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set current version
        uses: ./.github/actions/upload-build-version

  create_tag_and_prerelease:
    name: Create Tag and Pre-release
    needs: set-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build version
        uses: ./.github/actions/download-build-version

      - name: Get commit information
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
          COMMITTER_NAME=$(git log -1 --format='%an' ${{ github.sha }})
          echo "COMMIT_MESSAGE=${COMMIT_MESSAGE}" >> $GITHUB_ENV
          echo "COMMITTER_NAME=${COMMITTER_NAME}" >> $GITHUB_ENV

      - name: Print commit information
        run: |
          echo "Commit SHA: ${{ github.sha }}"
          echo "Commit Message: $COMMIT_MESSAGE"
          echo "Committer Name: $COMMITTER_NAME "

      - name: Create pre-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.BUILD_VERSION }}
          release_name: v${{ env.BUILD_VERSION }}
          body: |
            ## Release Information
            
            | Commit       | Author          | Message            |
            | ------------ | --------------- | ------------------ |
            | ${{ github.sha }} | ${{ env.COMMITTER_NAME }} | ${{ env.COMMIT_MESSAGE }} |
          prerelease: true
          draft: false

      - name: Upload release ID
        uses: ./.github/actions/upload-release-id
        with:
          release_id: ${{ steps.create_release.outputs.id }}

  publish:
    name: Publish to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: create_tag_and_prerelease
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        uses: ./.github/actions/install-dependencies

      - name: Build project
        run: pnpm build

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: ${{ secrets.BUILD_OUTPUT_DIRECTORY }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

  publish_release_on_sucess:
    name: Publish Release on Success
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ success() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update pre-release to release on success
        uses: ./.github/actions/update-prerelease-to-release
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  delete_release_on_failure:
    name: Delete Release on Failure
    runs-on: ubuntu-latest
    needs: publish
    if: ${{ failure() || cancelled() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Delete release
        uses: ./.github/actions/delete-release-and-tag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
